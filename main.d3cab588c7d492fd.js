"use strict";(self.webpackChunkkafka_stream_mermaid=self.webpackChunkkafka_stream_mermaid||[]).push([[179],{538:(h,A,u)=>{var S=u(427),r=u(96),f=u(860),g=u(485),N=u(19);function y(e,i){if(1&e&&r._UZ(0,"div",1),2&e){const t=r.oxw();r.Q6J("innerHTML",t.svgContent,r.oJD)}}const l=e=>e.replaceAll("-","-<br>");let T=(()=>{class e{static startFormatter(t){return`subgraph Sub-Topology: ${t}`}static endFormatter(){return"end"}static visit(t,o,a){let n=t.match(this.pattern);o.length&&o.push(this.endFormatter()),n&&(o.push(this.startFormatter(n[1])),a.push(n[1]))}}return e.pattern=/Sub-topology: ([0-9]*)/,e})(),M=(()=>{class e{static formatter(t,o){return`${o}[${o}] --\x3e ${t}(${l(t)})`}static visit(t,o,a,n){let s=t.match(this.pattern);s&&(n.currentGraphNodeName=s[1].trim(),s[2].split(",").filter(String).map(p=>p.trim()).forEach(p=>{o.push(this.formatter(n.currentGraphNodeName,p)),a.push(p)}))}}return e.pattern=/Source:\s+(\S+)\s+\(topics:\s+\[(.*)\]\)/,e})(),R=(()=>{class e{static formatter(t,o){return t.includes("JOIN")?`${o}[(${l(o)})] --\x3e ${t}(${l(t)})`:`${t}(${l(t)}) --\x3e ${o}[(${l(o)})]`}static visit(t,o,a,n){let s=t.match(this.pattern);s&&(o.currentGraphNodeName=s[1].trim(),s[2].split(",").filter(String).map(p=>p.trim()).forEach(p=>{a.push(this.formatter(o.currentGraphNodeName,p)),n.push(p)}))}}return e.pattern=/Processor:\s+(\S+)\s+\(stores:\s+\[(.*)\]\)/,e})(),v=(()=>{class e{static formatter(t,o){return`${t}(${l(t)}) --\x3e ${o}[${o}]`}static visit(t,o,a,n){let s=t.match(this.pattern);if(s){o.currentGraphNodeName=s[1].trim();let m=s[2].trim();a.push(this.formatter(o.currentGraphNodeName,m)),n.push(m)}}}return e.pattern=/Sink:\s+(\S+)\s+\(topic:\s+(.*)\)/,e})(),K=(()=>{class e{static formatter(t,o){return`${t}(${l(t)}) --\x3e ${o}(${l(o)})`}static visit(t,o,a){let n=t.match(this.pattern);n&&n[1].split(",").filter(String).map(s=>s.trim()).filter(s=>"none"!==s).forEach(s=>{a.push(this.formatter(o.currentGraphNodeName,s))})}}return e.pattern=/\s*-->\s+(.*)/,e})(),C=(()=>{class e{constructor(t){this.sanitizer=t}set topologyDescription(t){let o=this.toMermaid(t);g.Z.mermaidAPI.render("mermaid-graph-"+Date.now(),o.description,a=>{setTimeout(()=>{this.svgContent=a,this.svgContent=this.sanitizer.bypassSecurityTrustHtml(a)})})}ngOnInit(){g.Z.initialize({theme:"forest",startOnLoad:!1})}toMermaid(t){let o=t.split("\n"),a=[],n=[],s={currentGraphNodeName:""},m=[],p=[],d=[],E=[];for(const c of o)switch(!0){case T.pattern.test(c):T.visit(c,a,m);break;case M.pattern.test(c):M.visit(c,n,p,s);break;case R.pattern.test(c):R.visit(c,s,n,E);break;case v.pattern.test(c):v.visit(c,s,n,d);break;case K.pattern.test(c):K.visit(c,s,a)}return a.length&&a.push(T.endFormatter()),{description:["graph TD"].concat(n).concat(a).concat(p).concat(d).concat(E).join("\n"),details:{subTopologies:m,topicSources:p,topicSinks:d,stateStores:E}}}}return e.\u0275fac=function(t){return new(t||e)(r.Y36(S.H7))},e.\u0275cmp=r.Xpm({type:e,selectors:[["app-kafka-stream-graph"]],inputs:{topologyDescription:"topologyDescription"},decls:1,vars:1,consts:[[3,"innerHTML",4,"ngIf"],[3,"innerHTML"]],template:function(t,o){1&t&&r.YNc(0,y,1,1,"div",0),2&t&&r.Q6J("ngIf",o.svgContent)},directives:[N.O5],styles:['#topology-description[_ngcontent-%COMP%]{resize:none;font-family:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace}']}),e})(),k=(()=>{class e{constructor(){this.topologyDescription="Topology\nSub-topologies:\nSub-topology: 0\n\tSource:  KSTREAM-SOURCE-0000000000 (topics: [conversation-meta])\n\t--\x3e KSTREAM-TRANSFORM-0000000001\n\tProcessor: KSTREAM-TRANSFORM-0000000001 (stores: [conversation-meta-state])\n\t--\x3e KSTREAM-KEY-SELECT-0000000002\n\t<-- KSTREAM-SOURCE-0000000000\n\tProcessor: KSTREAM-KEY-SELECT-0000000002 (stores: [])\n\t--\x3e KSTREAM-FILTER-0000000005\n\t<-- KSTREAM-TRANSFORM-0000000001\n\tProcessor: KSTREAM-FILTER-0000000005 (stores: [])\n\t--\x3e KSTREAM-SINK-0000000004\n\t<-- KSTREAM-KEY-SELECT-0000000002\n\tSink: KSTREAM-SINK-0000000004 (topic: count-resolved-repartition)\n\t<-- KSTREAM-FILTER-0000000005\nSub-topology: 1\n\tSource: KSTREAM-SOURCE-0000000006 (topics: [count-resolved-repartition])\n\t--\x3e KSTREAM-AGGREGATE-0000000003\n\tProcessor: KSTREAM-AGGREGATE-0000000003 (stores: [count-resolved])\n\t--\x3e KTABLE-TOSTREAM-0000000007\n\t<-- KSTREAM-SOURCE-0000000006\n\tProcessor: KTABLE-TOSTREAM-0000000007 (stores: [])\n\t--\x3e KSTREAM-SINK-0000000008\n\t<-- KSTREAM-AGGREGATE-0000000003\n\tSink: KSTREAM-SINK-0000000008 (topic: streams-count-resolved)\n\t<-- KTABLE-TOSTREAM-0000000007\n\t\t\t"}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=r.Xpm({type:e,selectors:[["app-root"]],decls:4,vars:2,consts:[[3,"ngModel","ngModelChange"],[3,"topologyDescription"]],template:function(t,o){1&t&&(r.TgZ(0,"h1"),r._uU(1,"TODO input stuff"),r.qZA(),r.TgZ(2,"textarea",0),r.NdJ("ngModelChange",function(n){return o.topologyDescription=n}),r.qZA(),r._UZ(3,"app-kafka-stream-graph",1)),2&t&&(r.xp6(2),r.Q6J("ngModel",o.topologyDescription),r.xp6(1),r.Q6J("topologyDescription",o.topologyDescription))},directives:[f.Fj,f.JJ,f.On,C],styles:[""]}),e})(),G=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=r.oAB({type:e,bootstrap:[k]}),e.\u0275inj=r.cJS({providers:[],imports:[[S.b2,f.u5]]}),e})();(0,r.G48)(),S.q6().bootstrapModule(G).catch(e=>console.error(e))}},h=>{h.O(0,[736],()=>h(h.s=538)),h.O()}]);