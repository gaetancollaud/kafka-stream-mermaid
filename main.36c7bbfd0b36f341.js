"use strict";(self.webpackChunkkafka_stream_mermaid=self.webpackChunkkafka_stream_mermaid||[]).push([[179],{538:(u,E,h)=>{var S=h(427),s=h(343),A=h(485),K=h(19);function v(e,i){if(1&e&&s._UZ(0,"div",1),2&e){const t=s.oxw();s.Q6J("innerHTML",t.svgContent,s.oJD)}}const m=e=>e.replaceAll("-","-<br>");let f=(()=>{class e{static startFormatter(t){return`subgraph Sub-Topology: ${t}`}static endFormatter(){return"end"}static visit(t,r,a){let n=t.match(this.pattern);r.length&&r.push(this.endFormatter()),n&&(r.push(this.startFormatter(n[1])),a.push(n[1]))}}return e.pattern=/Sub-topology: ([0-9]*)/,e})(),M=(()=>{class e{static formatter(t,r){return`${r}[${r}] --\x3e ${t}(${m(t)})`}static visit(t,r,a,n){let o=t.match(this.pattern);o&&(n.currentGraphNodeName=o[1].trim(),o[2].split(",").filter(String).map(c=>c.trim()).forEach(c=>{r.push(this.formatter(n.currentGraphNodeName,c)),a.push(c)}))}}return e.pattern=/Source:\s+(\S+)\s+\(topics:\s+\[(.*)\]\)/,e})(),R=(()=>{class e{static formatter(t,r){return t.includes("JOIN")?`${r}[(${m(r)})] --\x3e ${t}(${m(t)})`:`${t}(${m(t)}) --\x3e ${r}[(${m(r)})]`}static visit(t,r,a,n){let o=t.match(this.pattern);o&&(r.currentGraphNodeName=o[1].trim(),o[2].split(",").filter(String).map(c=>c.trim()).forEach(c=>{a.push(this.formatter(r.currentGraphNodeName,c)),n.push(c)}))}}return e.pattern=/Processor:\s+(\S+)\s+\(stores:\s+\[(.*)\]\)/,e})(),g=(()=>{class e{static formatter(t,r){return`${t}(${m(t)}) --\x3e ${r}[${r}]`}static visit(t,r,a,n){let o=t.match(this.pattern);if(o){r.currentGraphNodeName=o[1].trim();let l=o[2].trim();a.push(this.formatter(r.currentGraphNodeName,l)),n.push(l)}}}return e.pattern=/Sink:\s+(\S+)\s+\(topic:\s+(.*)\)/,e})(),k=(()=>{class e{static formatter(t,r){return`${t}(${m(t)}) --\x3e ${r}(${m(r)})`}static visit(t,r,a){let n=t.match(this.pattern);n&&n[1].split(",").filter(String).map(o=>o.trim()).filter(o=>"none"!==o).forEach(o=>{a.push(this.formatter(r.currentGraphNodeName,o))})}}return e.pattern=/\s*-->\s+(.*)/,e})(),N=(()=>{class e{constructor(t){this.sanitizer=t}ngOnInit(){}ngAfterViewInit(){A.Z.initialize({theme:"forest",startOnLoad:!1}),this.initGraph()}toMermaid(t){let r=t.split("\n"),a=[],n=[],o={currentGraphNodeName:""},l=[],c=[],T=[],d=[];for(const p of r)switch(!0){case f.pattern.test(p):f.visit(p,a,l);break;case M.pattern.test(p):M.visit(p,n,c,o);break;case R.pattern.test(p):R.visit(p,o,n,d);break;case g.pattern.test(p):g.visit(p,o,n,T);break;case k.pattern.test(p):k.visit(p,o,a)}return a.length&&a.push(f.endFormatter()),{description:["graph TD"].concat(n).concat(a).concat(c).concat(T).concat(d).join("\n"),details:{subTopologies:l,topicSources:c,topicSinks:T,stateStores:d}}}initGraph(){let r=this.toMermaid("Topology\nSub-topologies:\nSub-topology: 0\n\tSource:  KSTREAM-SOURCE-0000000000 (topics: [conversation-meta])\n\t--\x3e KSTREAM-TRANSFORM-0000000001\n\tProcessor: KSTREAM-TRANSFORM-0000000001 (stores: [conversation-meta-state])\n\t--\x3e KSTREAM-KEY-SELECT-0000000002\n\t<-- KSTREAM-SOURCE-0000000000\n\tProcessor: KSTREAM-KEY-SELECT-0000000002 (stores: [])\n\t--\x3e KSTREAM-FILTER-0000000005\n\t<-- KSTREAM-TRANSFORM-0000000001\n\tProcessor: KSTREAM-FILTER-0000000005 (stores: [])\n\t--\x3e KSTREAM-SINK-0000000004\n\t<-- KSTREAM-KEY-SELECT-0000000002\n\tSink: KSTREAM-SINK-0000000004 (topic: count-resolved-repartition)\n\t<-- KSTREAM-FILTER-0000000005\nSub-topology: 1\n\tSource: KSTREAM-SOURCE-0000000006 (topics: [count-resolved-repartition])\n\t--\x3e KSTREAM-AGGREGATE-0000000003\n\tProcessor: KSTREAM-AGGREGATE-0000000003 (stores: [count-resolved])\n\t--\x3e KTABLE-TOSTREAM-0000000007\n\t<-- KSTREAM-SOURCE-0000000006\n\tProcessor: KTABLE-TOSTREAM-0000000007 (stores: [])\n\t--\x3e KSTREAM-SINK-0000000008\n\t<-- KSTREAM-AGGREGATE-0000000003\n\tSink: KSTREAM-SINK-0000000008 (topic: streams-count-resolved)\n\t<-- KTABLE-TOSTREAM-0000000007\n\t\t\t");console.log(r.description),A.Z.mermaidAPI.render("mermaid-graph-"+Date.now(),r.description,a=>{console.log(a),setTimeout(()=>{this.svgContent=a,this.svgContent=this.sanitizer.bypassSecurityTrustHtml(a)})})}}return e.\u0275fac=function(t){return new(t||e)(s.Y36(S.H7))},e.\u0275cmp=s.Xpm({type:e,selectors:[["app-kafka-stream-graph"]],decls:3,vars:1,consts:[[3,"innerHTML",4,"ngIf"],[3,"innerHTML"]],template:function(t,r){1&t&&(s.TgZ(0,"p"),s._uU(1,"kafka-stream-graph works!"),s.qZA(),s.YNc(2,v,1,1,"div",0)),2&t&&(s.xp6(2),s.Q6J("ngIf",r.svgContent))},directives:[K.O5],styles:['#topology-description[_ngcontent-%COMP%]{resize:none;font-family:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace}']}),e})(),G=(()=>{class e{constructor(){this.title="kafka-stream-mermaid"}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=s.Xpm({type:e,selectors:[["app-root"]],decls:3,vars:0,template:function(t,r){1&t&&(s.TgZ(0,"h1"),s._uU(1,"Test"),s.qZA(),s._UZ(2,"app-kafka-stream-graph"))},directives:[N],styles:[""]}),e})(),b=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=s.oAB({type:e,bootstrap:[G]}),e.\u0275inj=s.cJS({providers:[],imports:[[S.b2]]}),e})();(0,s.G48)(),S.q6().bootstrapModule(b).catch(e=>console.error(e))}},u=>{u.O(0,[736],()=>u(u.s=538)),u.O()}]);